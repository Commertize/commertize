interface DiscordInteraction {
  type: number;
  data?: {
    name: string;
    options?: Array<{ name: string; value: string | number; type: number }>;
  };
  guild_id?: string;
  channel_id: string;
  member?: {
    user: DiscordUser;
  };
  user?: DiscordUser;
  token: string;
  id: string;
  application_id: string;
}

interface DiscordUser {
  id: string;
  username: string;
  discriminator: string;
  global_name?: string;
  bot?: boolean;
}

interface DiscordEmbed {
  title?: string;
  description?: string;
  color?: number;
  footer?: { text: string };
  timestamp?: string;
  thumbnail?: { url: string };
  image?: { url: string };
}

interface DiscordResponse {
  type: number;
  data?: {
    content?: string;
    embeds?: DiscordEmbed[];
    flags?: number;
  };
}

class DiscordBotHandler {
  private botToken: string;
  private applicationId: string;
  private guildId: string | null = null; // Set to specific guild ID if needed
  private adminUserIds: Set<string> = new Set();
  private bannedUsers: Set<string> = new Set();

  constructor() {
    this.botToken = process.env.DISCORD_BOT_TOKEN || '';
    this.applicationId = process.env.DISCORD_APPLICATION_ID || '';
    
    // Add admin user IDs here (Discord user IDs)
    // this.adminUserIds.add('YOUR_DISCORD_USER_ID');
    
    if (this.botToken && this.applicationId) {
      console.log('RUNE.DCZ Discord bot handler initialized successfully');
      this.setupCommands();
    }
  }

  private async setupCommands() {
    try {
      const commands = [
        {
          name: 'start',
          description: 'Welcome to RUNE.DCZ and learn about Commertize',
          type: 1
        },
        {
          name: 'help',
          description: 'Show all available commands and how to use them',
          type: 1
        },
        {
          name: 'tokenize',
          description: 'Learn how to tokenize your commercial property',
          type: 1
        },
        {
          name: 'invest',
          description: 'Explore tokenized real estate investment opportunities',
          type: 1
        },
        {
          name: 'faq',
          description: 'Frequently asked questions about Commertize',
          type: 1
        },
        {
          name: 'contact',
          description: 'Get in touch with the Commertize team',
          type: 1
        },
        {
          name: 'waitlist',
          description: 'Join the Commertize early access waitlist',
          type: 1
        },
        {
          name: 'docs',
          description: 'Access legal and technical documentation',
          type: 1
        },
        {
          name: 'dashboard',
          description: 'Access your Commertize dashboard',
          type: 1
        },
        // Admin commands
        {
          name: 'broadcast',
          description: '[ADMIN] Send announcement to all users',
          type: 1,
          options: [
            {
              name: 'message',
              description: 'Message to broadcast',
              type: 3,
              required: true
            }
          ]
        },
        {
          name: 'stats',
          description: '[ADMIN] View bot usage statistics',
          type: 1
        }
      ];

      // Register commands globally or to a specific guild
      const url = this.guildId
        ? `https://discord.com/api/v10/applications/${this.applicationId}/guilds/${this.guildId}/commands`
        : `https://discord.com/api/v10/applications/${this.applicationId}/commands`;

      const response = await fetch(url, {
        method: 'PUT',
        headers: {
          'Authorization': `Bot ${this.botToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(commands)
      });

      if (response.ok) {
        console.log('RUNE.DCZ slash commands registered successfully');
      } else {
        const errorText = await response.text();
        console.error('Failed to register Discord commands:', errorText);
      }
    } catch (error) {
      console.error('Error setting up Discord commands:', error);
    }
  }

  async handleInteraction(interaction: DiscordInteraction): Promise<DiscordResponse> {
    // Handle ping interactions
    if (interaction.type === 1) {
      return { type: 1 };
    }

    // Handle application command interactions
    if (interaction.type === 2 && interaction.data) {
      const userId = interaction.member?.user?.id || interaction.user?.id || '';
      const isAdmin = this.adminUserIds.has(userId);

      // Check if user is banned
      if (this.bannedUsers.has(userId)) {
        return {
          type: 4,
          data: {
            content: "‚õî You have been blocked from using RUNE.DCZ. Contact support if you believe this is an error.",
            flags: 64 // Ephemeral message
          }
        };
      }

      const commandName = interaction.data.name;

      switch (commandName) {
        case 'start':
          return this.handleStart(interaction);
        case 'help':
          return this.handleHelp();
        case 'tokenize':
          return this.handleTokenize();
        case 'invest':
          return this.handleInvest();
        case 'faq':
          return this.handleFAQ();
        case 'contact':
          return this.handleContact();
        case 'waitlist':
          return this.handleWaitlist();
        case 'docs':
          return this.handleDocs();
        case 'dashboard':
          return this.handleDashboard();
        case 'broadcast':
          return isAdmin ? this.handleBroadcast(interaction) : this.handleAdminOnly();
        case 'stats':
          return isAdmin ? this.handleStats() : this.handleAdminOnly();
        default:
          return {
            type: 4,
            data: {
              content: "‚ùì Unknown command. Use `/help` to see all available commands.",
              flags: 64
            }
          };
      }
    }

    return { type: 4, data: { content: "Invalid interaction type." } };
  }

  private handleStart(interaction: DiscordInteraction): DiscordResponse {
    const username = interaction.member?.user?.global_name || interaction.member?.user?.username || 
                    interaction.user?.global_name || interaction.user?.username || 'there';

    const embed: DiscordEmbed = {
      title: `üè¢ Welcome to RUNE.DCZ, ${username}!`,
      description: `I'm your AI assistant for everything related to **Commertize** - the leading platform for commercial real estate tokenization.

üîπ **Property Owners:** Turn your building equity into digital assets for instant liquidity
üîπ **Investors:** Access fractional ownership in premium commercial properties  
üîπ **Revolutionary:** Blockchain-powered transparency and efficiency

**üöÄ Ready to get started?**
‚Ä¢ Use \`/tokenize\` to learn about property tokenization
‚Ä¢ Use \`/invest\` to explore investment opportunities
‚Ä¢ Use \`/waitlist\` to join early access
‚Ä¢ Use \`/help\` for all available commands

*The future of real estate is digital. Welcome to Commertize!*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleHelp(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'ü§ñ RUNE.DCZ Commands',
      description: `**üè† For Everyone:**
\`/start\` - Begin using RUNE.DCZ and see welcome message
\`/help\` - Show this help menu
\`/tokenize\` - Learn how to tokenize your property
\`/invest\` - Information for investors
\`/faq\` - Common questions and answers
\`/contact\` - Get in touch with our team
\`/waitlist\` - Join early access waitlist
\`/docs\` - Legal and technical documentation
\`/dashboard\` - Access your dashboard

**‚öôÔ∏è Admin Only:**
\`/broadcast\` - Send message to all users
\`/stats\` - View bot usage statistics

**üí° Tips:**
‚Ä¢ Commands work in both DMs and server channels
‚Ä¢ Start with \`/tokenize\` or \`/invest\` based on your interest  
‚Ä¢ Join \`/waitlist\` for exclusive early access

*Need personalized help? Use \`/contact\`!*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleTokenize(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'üè¢ Property Tokenization with Commertize',
      description: `**Transform your commercial real estate into digital assets!**

**üîë How It Works:**
1Ô∏è‚É£ **Submit Property:** Upload your property details and financials
2Ô∏è‚É£ **Due Diligence:** Our experts verify and analyze your asset
3Ô∏è‚É£ **Smart Contract:** Deploy ERC-3643 compliant tokens
4Ô∏è‚É£ **Launch:** Access instant liquidity while retaining ownership

**üí∞ Benefits:**
‚úÖ Instant access to 20-40% of property value
‚úÖ No traditional financing delays
‚úÖ Maintain property control and cash flows
‚úÖ Transparent blockchain-based ownership
‚úÖ Global investor marketplace

**üìã Requirements:**
‚Ä¢ Commercial property (office, retail, industrial, multifamily)
‚Ä¢ Minimum $5M property value
‚Ä¢ Clear title and financial records
‚Ä¢ Professional property management

**üöÄ Ready to start?**
‚Ä¢ Join \`/waitlist\` for early access
‚Ä¢ Visit commertize.com/tokenize
‚Ä¢ Contact our team: \`/contact\`

*Turn your property equity into instant capital!*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleInvest(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'üíé Invest in Tokenized Real Estate',
      description: `**Access premium commercial properties with fractional ownership!**

**üéØ Investment Opportunities:**
üè¢ **Office Buildings:** CBD locations, stable tenants
üè™ **Retail Centers:** High-traffic, diversified income
üè≠ **Industrial/Logistics:** E-commerce driven growth
üè† **Multifamily:** Residential rental properties

**üí∞ Investment Benefits:**
‚úÖ Start with as little as $1,000
‚úÖ Diversify across multiple properties
‚úÖ Receive quarterly dividend distributions
‚úÖ Transparent, blockchain-verified ownership
‚úÖ Trade tokens on secondary markets
‚úÖ No property management hassles

**üìä Deal Quality Index (DQI):**
Our proprietary 7-pillar scoring system rates every opportunity:
‚Ä¢ Financial strength & cash flow quality
‚Ä¢ Market conditions & tenant stability
‚Ä¢ Sponsor track record & legal structure
‚Ä¢ Risk assessment & data confidence

**üîí Secure & Compliant:**
‚Ä¢ Fully regulated digital securities
‚Ä¢ KYC/AML verification required
‚Ä¢ Institutional-grade custody
‚Ä¢ SEC-compliant offering documents

**üöÄ Get Started:**
‚Ä¢ Join \`/waitlist\` for exclusive deals
‚Ä¢ Visit commertize.com/invest
‚Ä¢ Questions? Use \`/contact\`

*The future of real estate investing is here!*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleFAQ(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: '‚ùì Frequently Asked Questions',
      description: `**üè¢ For Property Owners:**

**Q: How much of my property value can I tokenize?**
A: Typically 20-40% depending on property type and financials.

**Q: Do I lose control of my property?**
A: No! You retain operational control and management rights.

**Q: What are the fees?**
A: Transparent fee structure shared during due diligence.

**Q: How long does tokenization take?**
A: 6-12 weeks from submission to token launch.

**üíé For Investors:**

**Q: What's the minimum investment?**
A: Starting at $1,000 for most opportunities.

**Q: How do I receive returns?**
A: Quarterly distributions via stablecoins or traditional methods.

**Q: Can I sell my tokens?**
A: Yes, through our secondary marketplace (subject to regulations).

**Q: Are investments insured?**
A: Properties typically carry standard insurance; tokens are digitally secured.

**üîí General:**

**Q: Is this legally compliant?**
A: Yes, fully regulated digital securities with proper registrations.

**Q: Which blockchain do you use?**
A: Ethereum and Plume Network for optimal security and efficiency.

**üìû More questions?**
Use \`/contact\` to speak with our team directly!`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleContact(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'üìû Contact Commertize Team',
      description: `**Get in touch with our experts!**

**üè¢ Business Development:**
‚Ä¢ Email: business@commertize.com
‚Ä¢ For property owners and institutional inquiries

**üíº Investor Relations:**
‚Ä¢ Email: investors@commertize.com
‚Ä¢ For investment questions and opportunities

**üõ† Technical Support:**
‚Ä¢ Email: support@commertize.com
‚Ä¢ For platform and technical assistance

**üìã General Inquiries:**
‚Ä¢ Email: hello@commertize.com
‚Ä¢ For general questions and information

**üåê Online:**
‚Ä¢ Website: commertize.com
‚Ä¢ LinkedIn: /company/commertize
‚Ä¢ Twitter: @commertize

**üìÖ Schedule a Call:**
Visit commertize.com/contact to book a personalized consultation with our team.

**üè¢ Office:**
Commertize, Inc.
San Francisco, CA
(Specific address provided upon meeting scheduling)

**‚è∞ Business Hours:**
Monday - Friday: 9 AM - 6 PM PST
Response time: Usually within 24 hours

*We're here to help you navigate the future of real estate!*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleWaitlist(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'üöÄ Join the Commertize Waitlist',
      description: `**Get exclusive early access to the future of real estate!**

**üéØ Waitlist Benefits:**
‚úÖ Priority access to new property offerings
‚úÖ Exclusive investment opportunities
‚úÖ Early beta platform access
‚úÖ Special launch pricing and incentives
‚úÖ Direct updates from our team
‚úÖ Community access and networking

**üìù Join Now:**
üîó **commertize.com/waitlist**

Simply visit the link above and:
1Ô∏è‚É£ Enter your email address
2Ô∏è‚É£ Select your interest (Property Owner / Investor / Both)
3Ô∏è‚É£ Tell us about your goals
4Ô∏è‚É£ Get instant confirmation

**üìä Current Status:**
üî• **Limited spots available** for our exclusive launch cohort
‚è∞ **Early access** beginning Q1 2025
üéØ **Premium properties** already in our pipeline

**üíå What to Expect:**
‚Ä¢ Weekly market insights and updates
‚Ä¢ First access to new tokenization opportunities
‚Ä¢ Invitations to exclusive virtual events
‚Ä¢ Direct communication with our founding team

**üèÜ Referral Rewards:**
Invite friends and move up the waitlist faster! Each successful referral advances your position.

**üì± Stay Connected:**
Follow our progress and get updates:
‚Ä¢ Discord: You're here!
‚Ä¢ Website: commertize.com
‚Ä¢ Social media: @commertize

*The revolution starts with early adopters like you!*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleDocs(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'üìö Legal & Technical Documentation',
      description: `**Access comprehensive documentation and resources:**

**üìã Legal Documents:**
üîó **Terms of Service:** commertize.com/terms
üîó **Privacy Policy:** commertize.com/privacy
üîó **Risk Disclosures:** commertize.com/risks
üîó **Compliance Framework:** commertize.com/compliance

**üîß Technical Resources:**
üîó **Whitepaper:** commertize.com/whitepaper
üîó **Smart Contract Audits:** commertize.com/audits
üîó **API Documentation:** developers.commertize.com
üîó **Security Practices:** commertize.com/security

**üìä Financial Information:**
üîó **Fee Structure:** commertize.com/fees
üîó **Sample Offerings:** commertize.com/examples
üîó **Return Projections:** commertize.com/projections
üîó **Market Analysis:** commertize.com/research

**üè¢ Property Guidelines:**
üîó **Submission Requirements:** commertize.com/requirements
üîó **Due Diligence Process:** commertize.com/diligence
üîó **Tokenization Standards:** commertize.com/standards

**üíº For Professionals:**
üîó **Broker Resources:** commertize.com/brokers
üîó **Legal Partner Info:** commertize.com/legal
üîó **CPA Guidelines:** commertize.com/accounting

**üìû Document Questions?**
Contact our legal team: legal@commertize.com

**‚ö†Ô∏è Important Notice:**
All investments involve risk. Please review all documentation carefully and consult with qualified professionals before making investment decisions.

*Transparency and compliance are our foundations.*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleDashboard(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'üìä Access Your Commertize Dashboard',
      description: `**Manage your tokenized real estate portfolio:**

**üîó Dashboard Links:**
üè¢ **Property Owners:** dashboard.commertize.com/sponsors
üíº **Investors:** dashboard.commertize.com/investors
‚öôÔ∏è **Administrators:** admin.commertize.com

**üè† Sponsor Dashboard Features:**
‚úÖ Property submission and management
‚úÖ Tokenization progress tracking
‚úÖ Investor communications
‚úÖ Financial reporting and analytics
‚úÖ Compliance documentation
‚úÖ Distribution management

**üíé Investor Dashboard Features:**
‚úÖ Portfolio overview and performance
‚úÖ Investment opportunities browser
‚úÖ Transaction history and documents
‚úÖ Distribution tracking and tax docs
‚úÖ Secondary market trading
‚úÖ Account settings and preferences

**üîí Secure Login:**
‚Ä¢ Multi-factor authentication required
‚Ä¢ KYC verification for full access
‚Ä¢ Bank-grade security protocols
‚Ä¢ Regular security audits

**üì± Mobile Optimized:**
Access your dashboard from any device - desktop, tablet, or mobile phone.

**üÜò Need Help?**
‚Ä¢ Tutorial videos available in-platform
‚Ä¢ Live chat support during business hours
‚Ä¢ Email: support@commertize.com
‚Ä¢ Phone support for verified users

**üöÄ Getting Started:**
1Ô∏è‚É£ Visit the appropriate dashboard link above
2Ô∏è‚É£ Create account or sign in
3Ô∏è‚É£ Complete KYC verification
4Ô∏è‚É£ Explore features and opportunities

**üí° Pro Tip:**
Bookmark your dashboard and enable notifications for real-time updates on your investments and properties.

*Your financial future, digitally managed.*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed] }
    };
  }

  private handleBroadcast(interaction: DiscordInteraction): DiscordResponse {
    const message = interaction.data?.options?.find(opt => opt.name === 'message')?.value as string;
    
    if (!message) {
      return {
        type: 4,
        data: {
          content: "üì¢ Please provide a message to broadcast.",
          flags: 64
        }
      };
    }

    // In a real implementation, you would send this message to all users
    // For now, just acknowledge the admin command
    return {
      type: 4,
      data: {
        content: `üì¢ **Broadcast scheduled:** "${message}"\n\n*Message will be sent to all registered users.*`,
        flags: 64
      }
    };
  }

  private handleStats(): DiscordResponse {
    const embed: DiscordEmbed = {
      title: 'üìä RUNE.DCZ Bot Statistics',
      description: `**üìà Usage Stats:**
‚Ä¢ Total Users: Loading...
‚Ä¢ Active Today: Loading...
‚Ä¢ Commands Used: Loading...
‚Ä¢ Most Popular: /tokenize

**üë• User Breakdown:**
‚Ä¢ Property Owners: Loading...
‚Ä¢ Investors: Loading...
‚Ä¢ General Interest: Loading...

**üîß System Status:**
‚Ä¢ Bot Status: ‚úÖ Online
‚Ä¢ API Status: ‚úÖ Connected
‚Ä¢ Database: ‚úÖ Operational
‚Ä¢ Last Restart: Recently

*Full analytics available in admin panel.*`,
      color: 0xBE8D00,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Admin Statistics' },
      timestamp: new Date().toISOString()
    };

    return {
      type: 4,
      data: { embeds: [embed], flags: 64 }
    };
  }

  private handleAdminOnly(): DiscordResponse {
    return {
      type: 4,
      data: {
        content: "‚õî Admin access required for this command.",
        flags: 64
      }
    };
  }

  isReady(): boolean {
    return this.botToken !== '' && this.applicationId !== '';
  }

  // Verify Discord interaction signature
  verifySignature(signature: string, timestamp: string, body: string): boolean {
    // In production, implement proper signature verification
    // using Discord's public key and crypto verification
    return true;
  }

  // Channel messaging methods (similar to Telegram integration)
  async sendToChannel(message: string): Promise<boolean> {
    const channelId = process.env.DISCORD_CHANNEL_ID;
    if (!channelId || !this.botToken) {
      console.error('Discord channel ID or bot token not configured');
      return false;
    }

    try {
      const response = await fetch(`https://discord.com/api/v10/channels/${channelId}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bot ${this.botToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: message
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to send message to Discord channel:', errorText);
        return false;
      }

      console.log('Message sent to Discord channel successfully');
      return true;
    } catch (error) {
      console.error('Error sending Discord channel message:', error);
      return false;
    }
  }

  async sendToChannelWithEmbed(title: string, description: string, color = 0xBE8D00): Promise<boolean> {
    const channelId = process.env.DISCORD_CHANNEL_ID;
    if (!channelId || !this.botToken) {
      console.error('Discord channel ID or bot token not configured');
      return false;
    }

    const embed: DiscordEmbed = {
      title,
      description,
      color,
      footer: { text: 'RUNE.DCZ ‚Ä¢ Commertize AI Assistant' },
      timestamp: new Date().toISOString()
    };

    try {
      const response = await fetch(`https://discord.com/api/v10/channels/${channelId}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bot ${this.botToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          embeds: [embed]
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to send embed to Discord channel:', errorText);
        return false;
      }

      console.log('Embed sent to Discord channel successfully');
      return true;
    } catch (error) {
      console.error('Error sending Discord embed:', error);
      return false;
    }
  }

  async sendDirectMessage(userId: string, message: string): Promise<boolean> {
    if (!this.botToken) {
      console.error('Discord bot token not configured');
      return false;
    }

    try {
      // First create a DM channel
      const dmResponse = await fetch('https://discord.com/api/v10/users/@me/channels', {
        method: 'POST',
        headers: {
          'Authorization': `Bot ${this.botToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          recipient_id: userId
        })
      });

      if (!dmResponse.ok) {
        console.error('Failed to create DM channel');
        return false;
      }

      const dmChannel = await dmResponse.json();

      // Send the message
      const messageResponse = await fetch(`https://discord.com/api/v10/channels/${dmChannel.id}/messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bot ${this.botToken}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: message
        })
      });

      if (!messageResponse.ok) {
        console.error('Failed to send DM');
        return false;
      }

      console.log('Direct message sent successfully');
      return true;
    } catch (error) {
      console.error('Error sending Discord DM:', error);
      return false;
    }
  }

  hasChannelConfigured(): boolean {
    return !!(process.env.DISCORD_CHANNEL_ID && this.botToken);
  }

  getBotStatus(): any {
    return {
      initialized: !!(this.botToken && this.applicationId),
      channelConfigured: this.hasChannelConfigured(),
      guildConfigured: !!process.env.DISCORD_GUILD_ID,
      botToken: this.botToken ? 'configured' : 'missing',
      applicationId: this.applicationId ? 'configured' : 'missing',
      channelId: process.env.DISCORD_CHANNEL_ID ? 'configured' : 'missing',
      guildId: process.env.DISCORD_GUILD_ID ? 'configured' : 'missing'
    };
  }
}

export const discordBotHandler = new DiscordBotHandler();
export default DiscordBotHandler;